"""
This type stub file was generated by pyright.
"""

"""Base class for sparse matrices"""
class SparseWarning(Warning):
    ...


class SparseFormatWarning(SparseWarning):
    ...


class SparseEfficiencyWarning(SparseWarning):
    ...


_formats = ...
_ufuncs_with_fixed_point_at_zero = ...
MAXPRINT = ...
class spmatrix:
    """ This class provides a base class for all sparse matrices.  It
    cannot be instantiated.  Most of the work is provided by subclasses.
    """
    __array_priority__ = ...
    ndim = ...
    def __init__(self, maxprint=...) -> None:
        ...
    
    def set_shape(self, shape): # -> None:
        """See `reshape`."""
        ...
    
    def get_shape(self): # -> None:
        """Get shape of a matrix."""
        ...
    
    shape = ...
    def reshape(self, *args, **kwargs): # -> spmatrix:
        """reshape(self, shape, order='C', copy=False)

        Gives a new shape to a sparse matrix without changing its data.

        Parameters
        ----------
        shape : length-2 tuple of ints
            The new shape should be compatible with the original shape.
        order : {'C', 'F'}, optional
            Read the elements using this index order. 'C' means to read and
            write the elements using C-like index order; e.g., read entire first
            row, then second row, etc. 'F' means to read and write the elements
            using Fortran-like index order; e.g., read entire first column, then
            second column, etc.
        copy : bool, optional
            Indicates whether or not attributes of self should be copied
            whenever possible. The degree to which attributes are copied varies
            depending on the type of sparse matrix being used.

        Returns
        -------
        reshaped_matrix : sparse matrix
            A sparse matrix with the given `shape`, not necessarily of the same
            format as the current object.

        See Also
        --------
        numpy.matrix.reshape : NumPy's implementation of 'reshape' for
                               matrices
        """
        ...
    
    def resize(self, shape):
        """Resize the matrix in-place to dimensions given by ``shape``

        Any elements that lie within the new shape will remain at the same
        indices, while non-zero elements lying outside the new shape are
        removed.

        Parameters
        ----------
        shape : (int, int)
            number of rows and columns in the new matrix

        Notes
        -----
        The semantics are not identical to `numpy.ndarray.resize` or
        `numpy.resize`. Here, the same data will be maintained at each index
        before and after reshape, if that index is within the new bounds. In
        numpy, resizing maintains contiguity of the array, moving elements
        around in the logical matrix but not within a flattened representation.

        We give no guarantees about whether the underlying data attributes
        (arrays, etc.) will be modified in place or replaced with new objects.
        """
        ...
    
    def astype(self, dtype, casting=..., copy=...): # -> spmatrix:
        """Cast the matrix elements to a specified type.

        Parameters
        ----------
        dtype : string or numpy dtype
            Typecode or data-type to which to cast the data.
        casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional
            Controls what kind of data casting may occur.
            Defaults to 'unsafe' for backwards compatibility.
            'no' means the data types should not be cast at all.
            'equiv' means only byte-order changes are allowed.
            'safe' means only casts which can preserve values are allowed.
            'same_kind' means only safe casts or casts within a kind,
            like float64 to float32, are allowed.
            'unsafe' means any data conversions may be done.
        copy : bool, optional
            If `copy` is `False`, the result might share some memory with this
            matrix. If `copy` is `True`, it is guaranteed that the result and
            this matrix do not share any memory.
        """
        ...
    
    def asfptype(self): # -> spmatrix:
        """Upcast matrix to a floating point format (if necessary)"""
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def getmaxprint(self): # -> Unknown:
        """Maximum number of elements to display when printed."""
        ...
    
    def count_nonzero(self):
        """Number of non-zero entries, equivalent to

        np.count_nonzero(a.toarray())

        Unlike getnnz() and the nnz property, which return the number of stored
        entries (the length of the data attribute), this method counts the
        actual number of non-zero entries in data.
        """
        ...
    
    def getnnz(self, axis=...):
        """Number of stored values, including explicit zeros.

        Parameters
        ----------
        axis : None, 0, or 1
            Select between the number of values across the whole matrix, in
            each column, or in each row.

        See also
        --------
        count_nonzero : Number of non-zero entries
        """
        ...
    
    @property
    def nnz(self):
        """Number of stored values, including explicit zeros.

        See also
        --------
        count_nonzero : Number of non-zero entries
        """
        ...
    
    def getformat(self): # -> Any | str:
        """Format of a matrix representation as a string."""
        ...
    
    def __repr__(self): # -> Any:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __bool__(self):
        ...
    
    __nonzero__ = ...
    def __len__(self): # -> NoReturn:
        ...
    
    def asformat(self, format, copy=...): # -> spmatrix | Any:
        """Return this matrix in the passed format.

        Parameters
        ----------
        format : {str, None}
            The desired matrix format ("csr", "csc", "lil", "dok", "array", ...)
            or None for no conversion.
        copy : bool, optional
            If True, the result is guaranteed to not share data with self.

        Returns
        -------
        A : This matrix in the passed format.
        """
        ...
    
    def multiply(self, other):
        """Point-wise multiplication by another matrix
        """
        ...
    
    def maximum(self, other):
        """Element-wise maximum between this and another matrix."""
        ...
    
    def minimum(self, other):
        """Element-wise minimum between this and another matrix."""
        ...
    
    def dot(self, other):
        """Ordinary dot product

        Examples
        --------
        >>> import numpy as np
        >>> from scipy.sparse import csr_matrix
        >>> A = csr_matrix([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
        >>> v = np.array([1, 0, -1])
        >>> A.dot(v)
        array([ 1, -3, -1], dtype=int64)

        """
        ...
    
    def power(self, n, dtype=...):
        """Element-wise power."""
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def __abs__(self):
        ...
    
    def __round__(self, ndigits=...): # -> int:
        ...
    
    def __add__(self, other): # -> spmatrix | _NotImplementedType:
        ...
    
    def __radd__(self, other): # -> spmatrix | _NotImplementedType:
        ...
    
    def __sub__(self, other): # -> spmatrix | _NotImplementedType:
        ...
    
    def __rsub__(self, other): # -> _NotImplementedType:
        ...
    
    def __mul__(self, other): # -> _NotImplementedType | matrix:
        """interpret other and call one of the following

        self._mul_scalar()
        self._mul_vector()
        self._mul_multivector()
        self._mul_sparse_matrix()
        """
        ...
    
    def __rmul__(self, other): # -> _NotImplementedType | matrix:
        ...
    
    def __matmul__(self, other): # -> _NotImplementedType | matrix:
        ...
    
    def __rmatmul__(self, other): # -> _NotImplementedType | matrix:
        ...
    
    def __truediv__(self, other): # -> _NotImplementedType:
        ...
    
    def __div__(self, other): # -> _NotImplementedType:
        ...
    
    def __rtruediv__(self, other): # -> _NotImplementedType:
        ...
    
    def __rdiv__(self, other): # -> _NotImplementedType:
        ...
    
    def __neg__(self):
        ...
    
    def __iadd__(self, other): # -> _NotImplementedType:
        ...
    
    def __isub__(self, other): # -> _NotImplementedType:
        ...
    
    def __imul__(self, other): # -> _NotImplementedType:
        ...
    
    def __idiv__(self, other): # -> _NotImplementedType:
        ...
    
    def __itruediv__(self, other): # -> _NotImplementedType:
        ...
    
    def __pow__(self, other): # -> csr_matrix | csc_matrix | coo_matrix | dia_matrix | Any | spmatrix | _NotImplementedType:
        ...
    
    def __getattr__(self, attr):
        ...
    
    def transpose(self, axes=..., copy=...):
        """
        Reverses the dimensions of the sparse matrix.

        Parameters
        ----------
        axes : None, optional
            This argument is in the signature *solely* for NumPy
            compatibility reasons. Do not pass in anything except
            for the default value.
        copy : bool, optional
            Indicates whether or not attributes of `self` should be
            copied whenever possible. The degree to which attributes
            are copied varies depending on the type of sparse matrix
            being used.

        Returns
        -------
        p : `self` with the dimensions reversed.

        See Also
        --------
        numpy.matrix.transpose : NumPy's implementation of 'transpose'
                                 for matrices
        """
        ...
    
    def conj(self, copy=...): # -> spmatrix:
        """Element-wise complex conjugation.

        If the matrix is of non-complex data type and `copy` is False,
        this method does nothing and the data is not copied.

        Parameters
        ----------
        copy : bool, optional
            If True, the result is guaranteed to not share data with self.

        Returns
        -------
        A : The element-wise complex conjugate.

        """
        ...
    
    def conjugate(self, copy=...): # -> spmatrix:
        ...
    
    def getH(self):
        """Return the Hermitian transpose of this matrix.

        See Also
        --------
        numpy.matrix.getH : NumPy's implementation of `getH` for matrices
        """
        ...
    
    def nonzero(self): # -> tuple[Unknown, Unknown]:
        """nonzero indices

        Returns a tuple of arrays (row,col) containing the indices
        of the non-zero elements of the matrix.

        Examples
        --------
        >>> from scipy.sparse import csr_matrix
        >>> A = csr_matrix([[1,2,0],[0,0,3],[4,0,5]])
        >>> A.nonzero()
        (array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))

        """
        ...
    
    def getcol(self, j): # -> _NotImplementedType | matrix:
        """Returns a copy of column j of the matrix, as an (m x 1) sparse
        matrix (column vector).
        """
        ...
    
    def getrow(self, i): # -> _NotImplementedType | matrix:
        """Returns a copy of row i of the matrix, as a (1 x n) sparse
        matrix (row vector).
        """
        ...
    
    def todense(self, order=..., out=...): # -> matrix:
        """
        Return a dense matrix representation of this matrix.

        Parameters
        ----------
        order : {'C', 'F'}, optional
            Whether to store multi-dimensional data in C (row-major)
            or Fortran (column-major) order in memory. The default
            is 'None', indicating the NumPy default of C-ordered.
            Cannot be specified in conjunction with the `out`
            argument.

        out : ndarray, 2-D, optional
            If specified, uses this array (or `numpy.matrix`) as the
            output buffer instead of allocating a new array to
            return. The provided array must have the same shape and
            dtype as the sparse matrix on which you are calling the
            method.

        Returns
        -------
        arr : numpy.matrix, 2-D
            A NumPy matrix object with the same shape and containing
            the same data represented by the sparse matrix, with the
            requested memory order. If `out` was passed and was an
            array (rather than a `numpy.matrix`), it will be filled
            with the appropriate values and returned wrapped in a
            `numpy.matrix` object that shares the same memory.
        """
        ...
    
    def toarray(self, order=..., out=...):
        """
        Return a dense ndarray representation of this matrix.

        Parameters
        ----------
        order : {'C', 'F'}, optional
            Whether to store multidimensional data in C (row-major)
            or Fortran (column-major) order in memory. The default
            is 'None', indicating the NumPy default of C-ordered.
            Cannot be specified in conjunction with the `out`
            argument.

        out : ndarray, 2-D, optional
            If specified, uses this array as the output buffer
            instead of allocating a new array to return. The provided
            array must have the same shape and dtype as the sparse
            matrix on which you are calling the method. For most
            sparse types, `out` is required to be memory contiguous
            (either C or Fortran ordered).

        Returns
        -------
        arr : ndarray, 2-D
            An array with the same shape and containing the same
            data represented by the sparse matrix, with the requested
            memory order. If `out` was passed, the same object is
            returned after being modified in-place to contain the
            appropriate values.
        """
        ...
    
    def tocsr(self, copy=...):
        """Convert this matrix to Compressed Sparse Row format.

        With copy=False, the data/indices may be shared between this matrix and
        the resultant csr_matrix.
        """
        ...
    
    def todok(self, copy=...):
        """Convert this matrix to Dictionary Of Keys format.

        With copy=False, the data/indices may be shared between this matrix and
        the resultant dok_matrix.
        """
        ...
    
    def tocoo(self, copy=...):
        """Convert this matrix to COOrdinate format.

        With copy=False, the data/indices may be shared between this matrix and
        the resultant coo_matrix.
        """
        ...
    
    def tolil(self, copy=...):
        """Convert this matrix to List of Lists format.

        With copy=False, the data/indices may be shared between this matrix and
        the resultant lil_matrix.
        """
        ...
    
    def todia(self, copy=...):
        """Convert this matrix to sparse DIAgonal format.

        With copy=False, the data/indices may be shared between this matrix and
        the resultant dia_matrix.
        """
        ...
    
    def tobsr(self, blocksize=..., copy=...):
        """Convert this matrix to Block Sparse Row format.

        With copy=False, the data/indices may be shared between this matrix and
        the resultant bsr_matrix.

        When blocksize=(R, C) is provided, it will be used for construction of
        the bsr_matrix.
        """
        ...
    
    def tocsc(self, copy=...):
        """Convert this matrix to Compressed Sparse Column format.

        With copy=False, the data/indices may be shared between this matrix and
        the resultant csc_matrix.
        """
        ...
    
    def copy(self): # -> spmatrix:
        """Returns a copy of this matrix.

        No data/indices will be shared between the returned value and current
        matrix.
        """
        ...
    
    def sum(self, axis=..., dtype=..., out=...):
        """
        Sum the matrix elements over a given axis.

        Parameters
        ----------
        axis : {-2, -1, 0, 1, None} optional
            Axis along which the sum is computed. The default is to
            compute the sum of all the matrix elements, returning a scalar
            (i.e., `axis` = `None`).
        dtype : dtype, optional
            The type of the returned matrix and of the accumulator in which
            the elements are summed.  The dtype of `a` is used by default
            unless `a` has an integer dtype of less precision than the default
            platform integer.  In that case, if `a` is signed then the platform
            integer is used while if `a` is unsigned then an unsigned integer
            of the same precision as the platform integer is used.

            .. versionadded:: 0.18.0

        out : np.matrix, optional
            Alternative output matrix in which to place the result. It must
            have the same shape as the expected output, but the type of the
            output values will be cast if necessary.

            .. versionadded:: 0.18.0

        Returns
        -------
        sum_along_axis : np.matrix
            A matrix with the same shape as `self`, with the specified
            axis removed.

        See Also
        --------
        numpy.matrix.sum : NumPy's implementation of 'sum' for matrices

        """
        ...
    
    def mean(self, axis=..., dtype=..., out=...): # -> Any:
        """
        Compute the arithmetic mean along the specified axis.

        Returns the average of the matrix elements. The average is taken
        over all elements in the matrix by default, otherwise over the
        specified axis. `float64` intermediate and return values are used
        for integer inputs.

        Parameters
        ----------
        axis : {-2, -1, 0, 1, None} optional
            Axis along which the mean is computed. The default is to compute
            the mean of all elements in the matrix (i.e., `axis` = `None`).
        dtype : data-type, optional
            Type to use in computing the mean. For integer inputs, the default
            is `float64`; for floating point inputs, it is the same as the
            input dtype.

            .. versionadded:: 0.18.0

        out : np.matrix, optional
            Alternative output matrix in which to place the result. It must
            have the same shape as the expected output, but the type of the
            output values will be cast if necessary.

            .. versionadded:: 0.18.0

        Returns
        -------
        m : np.matrix

        See Also
        --------
        numpy.matrix.mean : NumPy's implementation of 'mean' for matrices

        """
        ...
    
    def diagonal(self, k=...):
        """Returns the kth diagonal of the matrix.

        Parameters
        ----------
        k : int, optional
            Which diagonal to get, corresponding to elements a[i, i+k].
            Default: 0 (the main diagonal).

            .. versionadded:: 1.0

        See also
        --------
        numpy.diagonal : Equivalent numpy function.

        Examples
        --------
        >>> from scipy.sparse import csr_matrix
        >>> A = csr_matrix([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
        >>> A.diagonal()
        array([1, 0, 5])
        >>> A.diagonal(k=1)
        array([2, 3])
        """
        ...
    
    def setdiag(self, values, k=...): # -> None:
        """
        Set diagonal or off-diagonal elements of the array.

        Parameters
        ----------
        values : array_like
            New values of the diagonal elements.

            Values may have any length. If the diagonal is longer than values,
            then the remaining diagonal entries will not be set. If values are
            longer than the diagonal, then the remaining values are ignored.

            If a scalar value is given, all of the diagonal is set to it.

        k : int, optional
            Which off-diagonal to set, corresponding to elements a[i,i+k].
            Default: 0 (the main diagonal).

        """
        ...
    


def isspmatrix(x): # -> bool:
    """Is x of a sparse matrix type?

    Parameters
    ----------
    x
        object to check for being a sparse matrix

    Returns
    -------
    bool
        True if x is a sparse matrix, False otherwise

    Notes
    -----
    issparse and isspmatrix are aliases for the same function.

    Examples
    --------
    >>> from scipy.sparse import csr_matrix, isspmatrix
    >>> isspmatrix(csr_matrix([[5]]))
    True

    >>> from scipy.sparse import isspmatrix
    >>> isspmatrix(5)
    False
    """
    ...

issparse = ...
