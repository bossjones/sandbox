[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=.svn, .git, skins

# Pickle collected data for later comparisons. default yes
# persistent=no
# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist=cv2

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=


[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time. See also the "--disable" option for examples.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"


disable=C0103,C0330,E0211,E0213,W0221,E0239,E0603,E0604,E0611,E1002,E1101,E1103,F0220,F0401,I0011,R0201,R0801,R0924,W0142,W0201,W0212,W0232,W0613,W0633,W0703,W1001,R*


#:C0103 (invalid-name): *Invalid %s name "%s"*
#Used when the name doesn't match the regular expression associated to its type
#(constant, variable, class...). This message belongs to the basic checker.

#:C0330 bad-continuation: Wrong %s indentation%s.

#:E0211 Method has no argument

#:E0213 Method should have "self" as first argument

#:W0221 Arguments number differs from overridden '__call__' method

#:E0239 Inheriting 'Interface', which is not a class.

#:E0603(undefined-all-variable), ] Undefined variable name in __all__
# Complains when we have module.__name__ in __all__

#:E0604 (invalid-all-object): *Invalid object %r in __all__, must contain only strings*
#Used when an invalid (non-string) object occurs in __all__. This message belongs to the variables checker.

#:E0611 (no-name-in-module): *No name %r in module %r*
#Used when a name cannot be found in a module. This message belongs to the variables checker.

#:E1002 (super-on-old-class): *Use of super on an old style class*
#Used when an old style class uses the super builtin. This message belongs to the newstyle checker.

#:E1101 (no-member): *%s %r has no %r member*
#Used when a variable is accessed for an unexistent member. This message belongs to the typecheck checker.

#:E1103 (maybe-no-member): *%s %r has no %r member (but some types could not be inferred)*
#Used when a variable is accessed for an unexistent member, but astroid was not
#able to interpret all possible types of this variable. This message belongs to the typecheck checker.

#:F0220 (unresolved-interface): *failed to resolve interfaces implemented by %s (%s)*
#Used when a PyLint as failed to find interfaces implemented by a class This message belongs to the classes checker.

#:F0401 (import-error): *Unable to import %s*
#Used when pylint has been unable to import a module. This message belongs to the imports checker.

#:I0011 (locally-disabled): Locally disabling %s
# Used when an inline option disables a message or a messages category.

#:R0201 (no-self-use): *Method could be a function*
#Used when a method doesn't use its bound instance, and so could be written as
#a function. This message belongs to the classes checker.

#:R0801 (duplicate-code): *Similar lines in %s files*
#Indicates that a set of similar lines has been detected among multiple file.
#This usually means that the code should be refactored to avoid this
#duplication. This message belongs to the similarities checker.

#:R0924 (incomplete-protocol): *Badly implemented %s, implements %s but not %s*
#A class implements some of the special methods for a particular protocol, but
#not all of them This message belongs to the design checker.

#:W0142 (star-args): *Used * or ** magic*
#Used when a function or method is called using `*args` or `**kwargs` to
#dispatch arguments. This doesn't improve readability and should be used with
#care. This message belongs to the basic checker.

#:W0201 (attribute-defined-outside-init): *Attribute %r defined outside __init__*
#Used when an instance attribute is defined outside the __init__ method. This message belongs to the classes checker.

#:W0212 (protected-access): *Access to a protected member %s of a client class*
#Used when a protected member (i.e. class member with a name beginning with an
#underscore) is access outside the class or a descendant of the class where
#it's defined. This message belongs to the classes checker.

#:W0232 (no-init): *Class has no __init__ method*
#Used when a class has no __init__ method, neither its parent classes. This message belongs to the classes checker.

#:W0613 (unused-argument): *Unused argument %r*
#Used when a function or method argument is not used. This message belongs to the variables checker.

#:W0633 (unpacking-non-sequence): Attempting to unpack a non-sequence%s
#Used when something which is not a sequence is used in an unpack assignment

#:W0703 (broad-except): *Catching too general exception %s*
#Used when an except catches a too general exception, possibly burying
#unrelated errors. This message belongs to the exceptions checker.

#:W1001 (property-on-old-class): *Use of "property" on an old style class*
#Used when PyLint detect the use of the builtin "property" on an old style
#class while this is relying on new style classes features This message belongs to the newstyle checker.



[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=parseable

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
files-output=no

# Tells whether to display a full report or only the messages
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).

#evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the massage information. See doc for all details

msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=SQLObject

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent,objects


[BASIC]

# List of builtins function names that should not be used, separated by a comma
bad-functions=map,filter,apply,input

# Regular expression which should only match correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression which should only match correct module level names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression which should only match correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression which should only match correct function names
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct method names
method-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct instance attribute names
attr-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct argument names
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct variable names
variable-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match correct attribute names in class
# bodies
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=__.*__

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=yes

# A regular expression matching the beginning of the name of dummy variables
# (i.e. not used).
dummy-variables-rgx=_|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO,HOTFIX


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=200

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Maximum number of lines in a module
max-module-lines=2000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '


[CLASSES]

# List of interface methods to ignore, separated by a comma. This is used for
# instance to not check methods defines in Zope's Interface base class.
#ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=


[DESIGN]

# Maximum number of arguments for function / method
max-args=100

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=100

# Maximum number of return / yield for function / method body
max-returns=100

# Maximum number of branch for function / method body
max-branches=100
max-branchs=100
# Pylint 0.x

# Maximum number of statements in function / method body
max-statements=200

# Maximum number of parents for a class (see R0901).
max-parents=100

# Maximum number of attributes for a class (see R0902).
max-attributes=100

# Minimum number of public methods for a class (see R0903).
min-public-methods=0

# Maximum number of public methods for a class (see R0904).
max-public-methods=100


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception
