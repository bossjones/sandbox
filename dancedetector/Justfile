# just manual: https://github.com/casey/just/#readme

# Ignore the .env file that is only used by the web service
set dotenv-load := false

_default:
	@just --list

# install pip-tools
pip-tools:
	pip install pip setuptools==66.1.1 wheel
	pip install pip-tools==6.12.1 pipdeptree

# run pip-compile to generate requirements.txt
pip-compile: pip-tools
	pip-compile -v --pip-args "-v" --resolver=backtracking --output-file requirements.txt pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --output-file requirements-dev.txt --extra dev pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --output-file requirements-test.txt --extra tests pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --output-file requirements-doc.txt --extra docs pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --output-file requirements-experimental.txt --extra experimental pyproject.toml

# run pip-complie to generate requirements.txt and force rebuild
pip-compile-rebuild: pip-tools
	# rm -v requirements*.txt || true
	pip-compile -v --pip-args "-v" --resolver=backtracking --rebuild --output-file requirements.txt pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --rebuild --output-file requirements-dev.txt --extra dev pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --rebuild --output-file requirements-test.txt --extra tests pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --rebuild --output-file requirements-doc.txt --extra docs pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --rebuild --output-file requirements-experimental.txt --extra experimental pyproject.toml

# run pip-compile and upgrade downloaders
pip-compile-upgrade-downloaders:
	pip-compile -v --pip-args "-v" --resolver=backtracking --upgrade-package gallery-dl --output-file requirements.txt pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --upgrade-package yt-dlp --output-file requirements.txt pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --upgrade-package youtube_dl --output-file requirements.txt pyproject.toml

# run pip-compile and upgrade yt-dlp and gallery-dl
pip-compile-upgrade-yt-dlp-gallery-dl: pip-tools
	pip-compile -v --pip-args "-v" --resolver=backtracking --output-file requirements.txt pyproject.toml --upgrade yt-dlp  --upgrade gallery-dl

# upgrade pip-tools
pip-tools-upgrade:
	pip install --upgrade pip setuptools==66.1.1 wheel
	pip install pip-tools==6.12.1 pipdeptree --upgrade
	# rm -v requirements*.txt || true
	pip-compile -v --pip-args "-v" --resolver=backtracking --upgrade --output-file  requirements.txt pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --upgrade --output-file  requirements-dev.txt --extra dev pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --upgrade --output-file  requirements-test.txt --extra tests pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --upgrade --output-file  requirements-doc.txt --extra docs pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --upgrade --output-file  requirements-experimental.txt --extra experimental pyproject.toml

install-opencv-typing:
	./contrib/install_opencv_typing.sh

editable-install:
	pip install -e .[dev,tests,experimental,docs]

install-deps-all:
	pip install -r requirements.txt
	pip install -r requirements-dev.txt
	pip install -r requirements-test.txt
	pip install -r requirements-doc.txt
	pip install -r requirements-experimental.txt

install-editable:
	pip install -e .

pip-sync: pip-compile install-deps-all install-editable
	pip-sync requirements.txt requirements-dev.txt requirements-doc.txt requirements-experimental.txt requirements-test.txt

dev: pip-compile install-deps-all editable-install install-opencv-typing

pip-compile-upgrade-downloaders-and-install: pip-compile-upgrade-downloaders dev

upgrade-reset-dev-env: pip-tools-upgrade pip-sync editable-install

upgrade-downloaders-reset-dev-env: pip-compile-upgrade-downloaders pip-sync editable-install

# setup dev environment with all packages synced to lockfiles
reset-dev-env: pip-compile pip-sync install-deps-all install-editable

# sync dev env to lock files
syncenv:  reset-dev-env editable-install

# SOURCE: https://medium.com/jobtome-engineering/improve-productivity-of-python-projects-with-commitizen-678f012f4772

pre-flight:
	git stash
	git pull --rebase
	git stash pop
	echo -e "\n Environment ready, please run dancedetectorctl run"

rerun-latest:
	git stash; git pull --rebase; git stash pop; dancedetectorctl run

mongodb-setup:
	docker volume create dancedetectormongodata || true
	docker volume ls

lock:
	pip-compile -v --pip-args "-v" --resolver=backtracking -o ./requirements.txt ./pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --upgrade --extra dev -o ./requirements-dev.txt ./pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --upgrade --extra test -o ./requirements-test.txt ./pyproject.toml
	pip-compile -v --pip-args "-v" --resolver=backtracking --upgrade --extra doc -o ./requirements-doc.txt ./pyproject.toml

# verify python is running under pyenv
which-python:
	python -c "import sys;print(sys.executable)"

# install all pre-commit hooks
pre-commit-install:
	pre-commit install -f --install-hooks

# install taplo if not found
# https://github.com/mlops-club/awscdk-clearml/blob/3d47f23479dd18e864fda43e11ecc8d5624613a9/Justfile

# install just task runner tool
install-just:
	which just || (which brew && brew install just)

# install taplo a tool for working with TOML
install-taplo:
	which taplo || (which brew && brew install taplo)

fmt: install-taplo
	taplo fmt pyproject.toml
	validate-pyproject pyproject.toml
	inv ci.lint -vvvv

ruff-completion:
    ruff generate-shell-completion zsh >  ~/.zsh/completions/_ruff

# testing out ruff check only mode
ruff-check:
    ruff check --isolated --ignore ALL --select F841,ARG001,ARG002,ARG003,ARG004,ARG005,F401,F842,F811,F821,F407,F405,F821,F823 --no-fix --diff --exclude ./typings --exclude ./tasks --exclude ./scripts --exclude ./contrib --show-files . | diff-so-fancy

# run ruff check against a single file
ruff-check-one argument:
    @contrib/ansi --green " [ruff] show fixes"
    ruff check --show-fixes --config pyproject.toml '{{argument}}'|| true
    @echo ""
    @contrib/ansi --green " [ruff] show diff"
    ruff check --diff --config pyproject.toml '{{argument}}' || true
    @echo ""

# run ruff against a single file
ruff-one argument:
    @contrib/ansi --green " [ruff] show fixes"
    ruff check --show-fixes --config pyproject.toml '{{argument}}'|| true
    @echo ""
    @contrib/ansi --green " [ruff] show diff"
    ruff check --diff --config pyproject.toml '{{argument}}' || true
    @echo ""
    @contrib/ansi --green " [ruff] running fix ..."
    ruff --force-exclude --no-fix --no-cache --format json --config=pyproject.toml --fix '{{argument}}'
    @echo ""

# F401 = pyflakes unused import rules
# I = isort rules

# Run ruff version of isort check
ruff-isort-check argument:
    @contrib/ansi --green " [ruff] show fixes"
    ruff check --config=pyproject.toml --no-cache --ignore ALL --select I,F401 --no-fix --show-fixes '{{argument}}' || true
    @echo ""
    @contrib/ansi --green " [ruff] show diff"
    ruff check --config=pyproject.toml --no-cache --ignore ALL --select I,F401 --no-fix --diff '{{argument}}' || true

# F401 = pyflakes unused import rules
# I = isort rules

# Run ruff version of isort
ruff-isort argument:
    @contrib/ansi --green " [ruff] show fixes"
    ruff check --config=pyproject.toml --ignore ALL --select I,F401 --no-fix --show-fixes '{{argument}}' || true
    @echo ""
    @contrib/ansi --green " [ruff] show diff"
    ruff check --config=pyproject.toml --ignore ALL --select I,F401 --no-fix --diff '{{argument}}' || true
    @echo ""
    @contrib/ansi --green " [ruff] running fix ..."
    ruff --config=pyproject.toml --force-exclude --no-fix --no-cache --format text --ignore ALL --select I,F401 --fix '{{argument}}'
    @echo ""


# ruff check --isolated --ignore ALL --select I --no-fix --diff --exclude ./typings --exclude ./tasks --exclude ./scripts --exclude ./contrib --show-files . | diff-so-fancy

vulture-check:
    vulture ./try.py

download-redis-tui:
    curl -L 'https://github.com/mylxsw/redis-tui/releases/download/0.1.6/redis-tui-linux' > ~/.local/src/redis-tui
    chmod +x ~/.local/src/redis-tui
