# This Pylint rcfile contains a best-effort configuration to uphold the
# best-practices and style described in the Google Python style guide:
#   https://google.github.io/styleguide/pyguide.html
#
# Its canonical open-source location is:
#   https://google.github.io/styleguide/pylintrc


[MASTER]
# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
# NOTE: Use a conservative default here; 2 should speed up most setups and not hurt
# NOTE: any too bad. Override on command line as appropriate.
# jobs=2

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
# SOURCE: https://github.com/home-assistant/core/blob/dev/pylintrc
# load-plugins=pylint_strict_informational

# Pickle collected data for later comparisons. default yes
# persistent=no
# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist=cv2

[MESSAGES CONTROL]
# source: https://github.com/home-assistant/home-assistant/blob/dev/pylintrc
# Reasons disabled:
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# abstract-class-not-used - is flaky, should not show up but does
# unused-argument - generic callbacks and setup methods create a lot of warnings
# global-statement - used for the on-demand requirement installation
# redefined-variable-type - this is Python, we're duck typing!
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing

# disable=
#   locally-disabled,
#   duplicate-code,
#   cyclic-import,
#   abstract-class-little-used,
#   abstract-class-not-used,
#   unused-argument - generic callbacks and setup methods create a lot of warnings
#   global-statement,
#   redefined-variable-type,
#   too-many-arguments,
#   too-many-branches,
#   too-many-instance-attributes,
#   too-many-locals,
#   too-many-public-methods,
#   too-many-return-statements,
#   too-many-statements,
#   too-few-public-methods,
#   abstract-method,
# wrong-import-order - isort guards this

# disable=C0103,C0330,E0211,E0213,W0221,E0239,E0603,E0604,E0611,E1002,E1101,E1103,F0220,F0401,I0011,R0201,R0801,R0924,W0142,W0201,W0212,W0232,W0613,W0633,W0703,W1001,W1202,C0330,I0011,C0111,W0232,W0622,W0621,C0122,W0120,E0632,R1705,C0411,W1203,C0301,C0123,R1714
disable=C0103,E0211,E0213,W0221,E0239,E0603,E0604,E0611,E1101,E1103,F0401,I0011,R0801,W0201,W0212,W0613,W0633,W0703,W1202,I0011,C0111,W0622,W0621,W0120,E0632,R1705,C0411,C0301,C0123,R1714,W0511,W0612,W0611

# # Disable the message, report, category or checker with the given id(s). You
# # can either give multiple identifiers separated by comma (,) or put this
# # option multiple times (only on the command line, not in the configuration
# # file where it should appear only once).You can also use "--disable=all" to
# # disable everything first and then reenable specific checks. For example, if
# # you want to run only the similarities checker, you can use "--disable=all
# # --enable=similarities". If you want to run only the classes checker, but have
# # no Warning level messages displayed, use"--disable=all --enable=classes
# # --disable=W"
# disable=abstract-method,
#         apply-builtin,
#         arguments-differ,
#         attribute-defined-outside-init,
#         backtick,
#         bad-option-value,
#         basestring-builtin,
#         buffer-builtin,
#         c-extension-no-member,
#         consider-using-enumerate,
#         cmp-builtin,
#         cmp-method,
#         coerce-builtin,
#         coerce-method,
#         delslice-method,
#         div-method,
#         duplicate-code,
#         eq-without-hash,
#         execfile-builtin,
#         file-builtin,
#         filter-builtin-not-iterating,
#         fixme,
#         getslice-method,
#         global-statement,
#         hex-method,
#         idiv-method,
#         implicit-str-concat,
#         import-error,
#         import-self,
#         import-star-module-level,
#         inconsistent-return-statements,
#         input-builtin,
#         intern-builtin,
#         invalid-str-codec,
#         locally-disabled,
#         long-builtin,
#         long-suffix,
#         map-builtin-not-iterating,
#         misplaced-comparison-constant,
#         missing-function-docstring,
#         metaclass-assignment,
#         next-method-called,
#         next-method-defined,
#         no-absolute-import,
#         no-else-break,
#         no-else-continue,
#         no-else-raise,
#         no-else-return,
#         no-init,  # added
#         no-member,
#         no-name-in-module,
#         no-self-use,
#         nonzero-method,
#         oct-method,
#         old-division,
#         old-ne-operator,
#         old-octal-literal,
#         old-raise-syntax,
#         parameter-unpacking,
#         print-statement,
#         raising-string,
#         range-builtin-not-iterating,
#         raw_input-builtin,
#         rdiv-method,
#         reduce-builtin,
#         relative-import,
#         reload-builtin,
#         round-builtin,
#         setslice-method,
#         signature-differs,
#         standarderror-builtin,
#         suppressed-message,
#         sys-max-int,
#         too-few-public-methods,
#         too-many-ancestors,
#         too-many-arguments,
#         too-many-boolean-expressions,
#         too-many-branches,
#         too-many-instance-attributes,
#         too-many-locals,
#         too-many-nested-blocks,
#         too-many-public-methods,
#         too-many-return-statements,
#         too-many-statements,
#         trailing-newlines,
#         unichr-builtin,
#         unicode-builtin,
#         unnecessary-pass,
#         unpacking-in-except,
#         useless-else-on-loop,
#         useless-object-inheritance,
#         useless-suppression,
#         using-cmp-argument,
#         wrong-import-order,
#         xrange-builtin,
#         zip-builtin-not-iterating,

[REPORTS]
# reports=no
# output-format=colorized

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages.
reports=no

[BASIC]
# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,fd,main,_

# Include a hint for the correct naming format with invalid-name
include-naming-hint=no


# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
property-classes=abc.abstractproperty,cached_property.cached_property,cached_property.threaded_cached_property,cached_property.cached_property_with_ttl,cached_property.threaded_cached_property_with_ttl

# Regular expression matching correct constant names
#const-rgx=(([A-Za-z_][A-Za-z0-9_]*)|(__.*__))$
const-rgx=(([A-Za-z_][A-Za-z0-9_]*)|(__.*__))$

# Regular expression matching correct function names
#function-rgx=[a-z_][a-z0-9_]{2,30}$
function-rgx=[a-z_][a-z0-9_]{2,60}$

# Regular expression matching correct method names
#method-rgx=[a-z_][a-z0-9_]{2,30}$
method-rgx=(%(function-rgx)s|%(const-rgx)s)

# Regular expression matching correct variable names
#variable-rgx=[a-z_][a-z0-9_]{2,30}$
variable-rgx=[a-z_][a-z0-9_]{0,30}$

# Regular expression matching correct class names
#class-rgx=[A-Z_][a-zA-Z0-9]+$
class-rgx=%(const-rgx)s

[TYPECHECK]
# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
# SOURCE: https://cs50.stackexchange.com/questions/32768/instance-of-scoped-session-has-no-commit-member
ignored-classes=pytest,LocalPath,_MovedItems,SQLObject,Registrant,scoped_session,optparse.Values,thread._local,_thread._local
# NOTE: https://stackoverflow.com/questions/50319943/pytorch-error-message-torch-has-no-member
generated-members=numpy.*, torch.*,logging.root.*


[VARIABLES]
# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=_$|dummy|^unused|fake

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,_cb

[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines=5

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no

[DESIGN]
# Minimum number of public methods for a class (see R0903).
min-public-methods=0

# Maximum number of arguments for function / method
max-args=12

[EXCEPTIONS]
overgeneral-exceptions=Exception,MoonbeamError

[FORMAT]

# Maximum number of characters on a single line.
max-line-length=200

# Maximum number of lines in a module
max-module-lines=2000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

# vim:ft=dosini:
