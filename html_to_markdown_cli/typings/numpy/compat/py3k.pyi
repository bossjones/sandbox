"""
This type stub file was generated by pyright.
"""

import sys
import abc
from abc import ABC as abc_ABC

"""
Python 3.X compatibility tools.

While this file was originally intended for Python 2 -> 3 transition,
it is now used to create a compatibility layer between different
minor versions of Python 3.

While the active version of numpy may not support a given version of python, we
allow downstream libraries to continue to use these shims for forward
compatibility with numpy while they transition their code to newer versions of
Python.
"""
long = int
integer_types = ...
basestring = str
unicode = str
bytes = bytes
def asunicode(s): # -> str:
    ...

def asbytes(s): # -> bytes:
    ...

def asstr(s): # -> str:
    ...

def isfileobj(f): # -> bool:
    ...

def open_latin1(filename, mode=...): # -> TextIOWrapper:
    ...

def sixu(s):
    ...

strchar = ...
def getexception(): # -> BaseException | None:
    ...

def asbytes_nested(x): # -> list[Unknown] | bytes:
    ...

def asunicode_nested(x): # -> list[Unknown] | str:
    ...

def is_pathlib_path(obj): # -> bool:
    """
    Check whether obj is a pathlib.Path object.

    Prefer using `isinstance(obj, os_PathLike)` instead of this function.
    """
    ...

class contextlib_nullcontext:
    """Context manager that does no additional processing.

    Used as a stand-in for a normal context manager, when a particular
    block of code is only sometimes used with a normal context manager:

    cm = optional_cm if condition else nullcontext()
    with cm:
        # Perform operation, using optional_cm if condition is True
    """
    def __init__(self, enter_result=...) -> None:
        ...
    
    def __enter__(self): # -> Unknown:
        ...
    
    def __exit__(self, *excinfo): # -> None:
        ...
    


def npy_load_module(name, fn, info=...): # -> ModuleType:
    """
    Load a module.

    .. versionadded:: 1.11.2

    Parameters
    ----------
    name : str
        Full module name.
    fn : str
        Path to module file.
    info : tuple, optional
        Only here for backward compatibility with Python 2.*.

    Returns
    -------
    mod : module

    """
    ...

if sys.version_info[: 2] >= (3, 6):
    os_fspath = ...
    os_PathLike = ...
else:
    class os_PathLike(abc_ABC):
        """Abstract base class for implementing the file system path protocol."""
        @abc.abstractmethod
        def __fspath__(self):
            """Return the file system path representation of the object."""
            ...
        
        @classmethod
        def __subclasshook__(cls, subclass): # -> bool:
            ...
        
    
    
    def os_fspath(path): # -> str | bytes:
        """Return the path representation of a path-like object.
        If str or bytes is passed in, it is returned unchanged. Otherwise the
        os.PathLike interface is used to get the path representation. If the
        path representation is not str or bytes, TypeError is raised. If the
        provided path is not str, bytes, or os.PathLike, TypeError is raised.
        """
        ...
    
