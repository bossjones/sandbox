"""
This type stub file was generated by pyright.
"""

C_ABI_VERSION = ...
C_API_VERSION = ...
class MismatchCAPIWarning(Warning):
    ...


def is_released(config): # -> bool:
    """Return True if a released version of numpy is detected."""
    ...

def get_api_versions(apiversion, codegen_dir): # -> tuple[Any, Any]:
    """
    Return current C API checksum and the recorded checksum.

    Return current C API checksum and the recorded checksum for the given
    version of the C API version.

    """
    ...

def check_api_version(apiversion, codegen_dir): # -> None:
    """Emits a MismatchCAPIWarning if the C API version needs updating."""
    ...

MANDATORY_FUNCS = ...
OPTIONAL_STDFUNCS = ...
OPTIONAL_HEADERS = ...
OPTIONAL_INTRINSICS = ...
OPTIONAL_FUNCTION_ATTRIBUTES = ...
OPTIONAL_FUNCTION_ATTRIBUTES_WITH_INTRINSICS = ...
OPTIONAL_VARIABLE_ATTRIBUTES = ...
OPTIONAL_STDFUNCS_MAYBE = ...
C99_FUNCS = ...
C99_FUNCS_SINGLE = ...
C99_FUNCS_EXTENDED = ...
C99_COMPLEX_TYPES = ...
C99_COMPLEX_FUNCS = ...
def fname2def(name):
    ...

def sym2def(symbol):
    ...

def type2def(symbol):
    ...

def check_long_double_representation(cmd): # -> Literal['INTEL_EXTENDED_12_BYTES_LE', 'MOTOROLA_EXTENDED_12_BYTES_BE', 'INTEL_EXTENDED_16_BYTES_LE', 'IEEE_QUAD_BE', 'IEEE_QUAD_LE', 'IBM_DOUBLE_DOUBLE_LE', 'IBM_DOUBLE_DOUBLE_BE', 'IEEE_DOUBLE_LE', 'IEEE_DOUBLE_BE']:
    ...

LONG_DOUBLE_REPRESENTATION_SRC = ...
def pyod(filename): # -> list[Unknown]:
    """Python implementation of the od UNIX utility (od -b, more exactly).

    Parameters
    ----------
    filename : str
        name of the file to get the dump from.

    Returns
    -------
    out : seq
        list of lines of od output

    Note
    ----
    We only implement enough to get the necessary information for long double
    representation, this is not intended as a compatible replacement for od.
    """
    ...

_BEFORE_SEQ = ...
_AFTER_SEQ = ...
_IEEE_DOUBLE_BE = ...
_IEEE_DOUBLE_LE = ...
_INTEL_EXTENDED_12B = ...
_INTEL_EXTENDED_16B = ...
_MOTOROLA_EXTENDED_12B = ...
_IEEE_QUAD_PREC_BE = ...
_IEEE_QUAD_PREC_LE = ...
_IBM_DOUBLE_DOUBLE_BE = ...
_IBM_DOUBLE_DOUBLE_LE = ...
def long_double_representation(lines): # -> Literal['INTEL_EXTENDED_12_BYTES_LE', 'MOTOROLA_EXTENDED_12_BYTES_BE', 'INTEL_EXTENDED_16_BYTES_LE', 'IEEE_QUAD_BE', 'IEEE_QUAD_LE', 'IBM_DOUBLE_DOUBLE_LE', 'IBM_DOUBLE_DOUBLE_BE', 'IEEE_DOUBLE_LE', 'IEEE_DOUBLE_BE']:
    """Given a binary dump as given by GNU od -b, look for long double
    representation."""
    ...

def check_for_right_shift_internal_compiler_error(cmd): # -> bool:
    """
    On our arm CI, this fails with an internal compilation error

    The failure looks like the following, and can be reproduced on ARM64 GCC 5.4:

        <source>: In function 'right_shift':
        <source>:4:20: internal compiler error: in expand_shift_1, at expmed.c:2349
               ip1[i] = ip1[i] >> in2;
                      ^
        Please submit a full bug report,
        with preprocessed source if appropriate.
        See <http://gcc.gnu.org/bugs.html> for instructions.
        Compiler returned: 1

    This function returns True if this compiler bug is present, and we need to
    turn off optimization for the function
    """
    ...

