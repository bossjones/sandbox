"""
This type stub file was generated by pyright.
"""

import sys

if sys.version_info.major == 2:
    ...
else:
    ...
def translate(image, x, y): # -> Any:
    ...

def rotate(image, angle, center=..., scale=...): # -> Any:
    ...

def rotate_bound(image, angle): # -> Any:
    ...

def resize(image, width=..., height=..., inter=...): # -> Any:
    ...

def skeletonize(image, size, structuring=...): # -> Any:
    ...

def opencv2matplotlib(image): # -> Any:
    ...

def url_to_image(url, readFlag=...): # -> Any:
    ...

def auto_canny(image, sigma=...): # -> Any:
    ...

def grab_contours(cnts):
    ...

def is_cv2(or_better=...): # -> bool:
    ...

def is_cv3(or_better=...): # -> bool:
    ...

def is_cv4(or_better=...): # -> bool:
    ...

def get_opencv_major_version(lib=...): # -> int:
    ...

def check_opencv_version(major, lib=...): # -> bool:
    ...

def build_montages(image_list, image_shape, montage_shape): # -> list[Unknown]:
    """
    ---------------------------------------------------------------------------------------------
    author: Kyle Hounslow
    ---------------------------------------------------------------------------------------------
    Converts a list of single images into a list of 'montage' images of specified rows and columns.
    A new montage image is started once rows and columns of montage image is filled.
    Empty space of incomplete montage images are filled with black pixels
    ---------------------------------------------------------------------------------------------
    :param image_list: python list of input images
    :param image_shape: tuple, size each image will be resized to for display (width, height)
    :param montage_shape: tuple, shape of image montage (width, height)
    :return: list of montage images in numpy array format
    ---------------------------------------------------------------------------------------------

    example usage:

    # load single image
    img = cv2.imread('lena.jpg')
    # duplicate image 25 times
    num_imgs = 25
    img_list = []
    for i in xrange(num_imgs):
        img_list.append(img)
    # convert image list into a montage of 256x256 images tiled in a 5x5 montage
    montages = make_montages_of_images(img_list, (256, 256), (5, 5))
    # iterate through montages and display
    for montage in montages:
        cv2.imshow('montage image', montage)
        cv2.waitKey(0)

    ----------------------------------------------------------------------------------------------
    """
    ...

def adjust_brightness_contrast(image, brightness=..., contrast=...): # -> Any:
    """
    Adjust the brightness and/or contrast of an image

    :param image: OpenCV BGR image
    :param contrast: Float, contrast adjustment with 0 meaning no change
    :param brightness: Float, brightness adjustment with 0 meaning no change
    """
    ...

