"""
This type stub file was generated by pyright.
"""

import numpy
from typing import Any, Optional, Tuple, Union, overload
from typing_extensions import Literal

_IntegerType = Union[int, numpy.integer]
_FloatingType = Union[float, numpy.floating]
_PointsAndWeights = Tuple[numpy.ndarray, numpy.ndarray]
_PointsAndWeightsAndMu = Tuple[numpy.ndarray, numpy.ndarray, float]
@overload
def roots_jacobi(n: _IntegerType, alpha: _FloatingType, beta: _FloatingType) -> _PointsAndWeights:
    ...

@overload
def roots_jacobi(n: _IntegerType, alpha: _FloatingType, beta: _FloatingType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_jacobi(n: _IntegerType, alpha: _FloatingType, beta: _FloatingType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_sh_jacobi(n: _IntegerType, p1: _FloatingType, q1: _FloatingType) -> _PointsAndWeights:
    ...

@overload
def roots_sh_jacobi(n: _IntegerType, p1: _FloatingType, q1: _FloatingType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_sh_jacobi(n: _IntegerType, p1: _FloatingType, q1: _FloatingType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_genlaguerre(n: _IntegerType, alpha: _FloatingType) -> _PointsAndWeights:
    ...

@overload
def roots_genlaguerre(n: _IntegerType, alpha: _FloatingType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_genlaguerre(n: _IntegerType, alpha: _FloatingType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_laguerre(n: _IntegerType) -> _PointsAndWeights:
    ...

@overload
def roots_laguerre(n: _IntegerType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_laguerre(n: _IntegerType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_hermite(n: _IntegerType) -> _PointsAndWeights:
    ...

@overload
def roots_hermite(n: _IntegerType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_hermite(n: _IntegerType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_hermitenorm(n: _IntegerType) -> _PointsAndWeights:
    ...

@overload
def roots_hermitenorm(n: _IntegerType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_hermitenorm(n: _IntegerType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_gegenbauer(n: _IntegerType, alpha: _FloatingType) -> _PointsAndWeights:
    ...

@overload
def roots_gegenbauer(n: _IntegerType, alpha: _FloatingType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_gegenbauer(n: _IntegerType, alpha: _FloatingType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_chebyt(n: _IntegerType) -> _PointsAndWeights:
    ...

@overload
def roots_chebyt(n: _IntegerType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_chebyt(n: _IntegerType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_chebyu(n: _IntegerType) -> _PointsAndWeights:
    ...

@overload
def roots_chebyu(n: _IntegerType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_chebyu(n: _IntegerType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_chebyc(n: _IntegerType) -> _PointsAndWeights:
    ...

@overload
def roots_chebyc(n: _IntegerType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_chebyc(n: _IntegerType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_chebys(n: _IntegerType) -> _PointsAndWeights:
    ...

@overload
def roots_chebys(n: _IntegerType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_chebys(n: _IntegerType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_sh_chebyt(n: _IntegerType) -> _PointsAndWeights:
    ...

@overload
def roots_sh_chebyt(n: _IntegerType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_sh_chebyt(n: _IntegerType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_sh_chebyu(n: _IntegerType) -> _PointsAndWeights:
    ...

@overload
def roots_sh_chebyu(n: _IntegerType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_sh_chebyu(n: _IntegerType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_legendre(n: _IntegerType) -> _PointsAndWeights:
    ...

@overload
def roots_legendre(n: _IntegerType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_legendre(n: _IntegerType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

@overload
def roots_sh_legendre(n: _IntegerType) -> _PointsAndWeights:
    ...

@overload
def roots_sh_legendre(n: _IntegerType, mu: Literal[False]) -> _PointsAndWeights:
    ...

@overload
def roots_sh_legendre(n: _IntegerType, mu: Literal[True]) -> _PointsAndWeightsAndMu:
    ...

class orthopoly1d(numpy.poly1d):
    def __init__(self, roots: Any, weights: Optional[Any], hn: float = ..., kn: float = ..., wfunc=..., limits=..., monic: bool = ..., eval_func: numpy.ufunc = ...) -> None:
        ...
    
    @property
    def limits(self) -> Tuple[float, float]:
        ...
    
    def weight_func(self, x: float) -> float:
        ...
    
    def __call__(self, x: Any) -> Any:
        ...
    


def legendre(n: _IntegerType, monic: bool = ...) -> orthopoly1d:
    ...

def chebyt(n: _IntegerType, monic: bool = ...) -> orthopoly1d:
    ...

def chebyu(n: _IntegerType, monic: bool = ...) -> orthopoly1d:
    ...

def chebyc(n: _IntegerType, monic: bool = ...) -> orthopoly1d:
    ...

def chebys(n: _IntegerType, monic: bool = ...) -> orthopoly1d:
    ...

def jacobi(n: _IntegerType, alpha: _FloatingType, beta: _FloatingType, monic: bool = ...) -> orthopoly1d:
    ...

def laguerre(n: _IntegerType, monic: bool = ...) -> orthopoly1d:
    ...

def genlaguerre(n: _IntegerType, alpha: _FloatingType, monic: bool = ...) -> orthopoly1d:
    ...

def hermite(n: _IntegerType, monic: bool = ...) -> orthopoly1d:
    ...

def hermitenorm(n: _IntegerType, monic: bool = ...) -> orthopoly1d:
    ...

def gegenbauer(n: _IntegerType, alpha: _FloatingType, monic: bool = ...) -> orthopoly1d:
    ...

def sh_legendre(n: _IntegerType, monic: bool = ...) -> orthopoly1d:
    ...

def sh_chebyt(n: _IntegerType, monic: bool = ...) -> orthopoly1d:
    ...

def sh_chebyu(n: _IntegerType, monic: bool = ...) -> orthopoly1d:
    ...

def sh_jacobi(n: _IntegerType, p: _FloatingType, q: _FloatingType, monic: bool = ...) -> orthopoly1d:
    ...

