
[MASTER]
# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
# NOTE: Use a conservative default here; 2 should speed up most setups and not hurt
# NOTE: any too bad. Override on command line as appropriate.
# jobs=2

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
# SOURCE: https://github.com/home-assistant/core/blob/dev/pylintrc
# load-plugins=pylint_strict_informational

# Pickle collected data for later comparisons. default yes
# persistent=no
# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist=cv2

[MESSAGES CONTROL]
# source: https://github.com/home-assistant/home-assistant/blob/dev/pylintrc
# Reasons disabled:
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# abstract-class-not-used - is flaky, should not show up but does
# unused-argument - generic callbacks and setup methods create a lot of warnings
# global-statement - used for the on-demand requirement installation
# redefined-variable-type - this is Python, we're duck typing!
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing

# disable=
#   locally-disabled,
#   duplicate-code,
#   cyclic-import,
#   abstract-class-little-used,
#   abstract-class-not-used,
#   unused-argument - generic callbacks and setup methods create a lot of warnings
#   global-statement,
#   redefined-variable-type,
#   too-many-arguments,
#   too-many-branches,
#   too-many-instance-attributes,
#   too-many-locals,
#   too-many-public-methods,
#   too-many-return-statements,
#   too-many-statements,
#   too-few-public-methods,
#   abstract-method,
# wrong-import-order - isort guards this

disable=C0103,C0330,E0211,E0213,W0221,E0239,E0603,E0604,E0611,E1002,E1101,E1103,F0220,F0401,I0011,R0201,R0801,R0924,W0142,W0201,W0212,W0232,W0613,W0633,W0703,W1001,W1202,C0330,I0011,C0111,W0232,W0622,W0621,C0122,W0120,E0632,R1705,C0411,W1203,C0301,C0123,R1714

[REPORTS]
# reports=no
# output-format=colorized

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages.
reports=no

[BASIC]
# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,fd

# Regular expression matching correct constant names
#const-rgx=(([A-Za-z_][A-Za-z0-9_]*)|(__.*__))$
const-rgx=(([A-Za-z_][A-Za-z0-9_]*)|(__.*__))$

# Regular expression matching correct function names
#function-rgx=[a-z_][a-z0-9_]{2,30}$
function-rgx=[a-z_][a-z0-9_]{2,60}$

# Regular expression matching correct method names
#method-rgx=[a-z_][a-z0-9_]{2,30}$
method-rgx=(%(function-rgx)s|%(const-rgx)s)

# Regular expression matching correct variable names
#variable-rgx=[a-z_][a-z0-9_]{2,30}$
variable-rgx=[a-z_][a-z0-9_]{0,30}$

# Regular expression matching correct class names
#class-rgx=[A-Z_][a-zA-Z0-9]+$
class-rgx=%(const-rgx)s

[TYPECHECK]
# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
# SOURCE: https://cs50.stackexchange.com/questions/32768/instance-of-scoped-session-has-no-commit-member
ignored-classes=pytest,LocalPath,_MovedItems,SQLObject,Registrant,scoped_session


[VARIABLES]
# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=_$|dummy|^unused|fake

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,_cb

[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines=5

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no

[DESIGN]
# Minimum number of public methods for a class (see R0903).
min-public-methods=0

# Maximum number of arguments for function / method
max-args=12

[EXCEPTIONS]
overgeneral-exceptions=Exception,MoonbeamError

[FORMAT]

# Maximum number of characters on a single line.
max-line-length=200

# Maximum number of lines in a module
max-module-lines=2000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no

# List of optional constructs for which whitespace checking is disabled
no-space-check=trailing-comma,dict-separator

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

# vim:ft=dosini:
